#!/data/data/com.termux/files/usr/bin/bash

# Version and author information
VERSION="conventor v1.0"
AUTHOR="by PhateValleyman\nJonas.Ned@outlook.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo -e "${GREEN}Usage:${NC}"
    echo -e "    $0 [OPTIONS]"
    echo -e "${GREEN}Options:${NC}"
    echo -e "    -i, --input FILE1 [FILE2 ...]  Specify input file(s) for conversion."
    echo -e "    -o, --output FILE1 [FILE2 ...] Specify output file(s) or folder."
    echo -e "    -v, --version                  Show version information."
    echo -e "    -h, --help                     Show this help screen."
    echo -e "${GREEN}Examples:${NC}"
    echo -e "    $0 -i input1.avi input2.mp4 -o output1.mp4 output2.mp4"
    echo -e "    $0 -i input1.avi -o output_folder/"
    echo -e "    $0 -i input1.avi input2.mp4 -o output_folder/"
    echo -e "    $0 -v"
    echo -e "    $0 -h"
}

# Function to display version
version() {
    echo -e "${BLUE}$VERSION${NC}"
    echo -e "${YELLOW}$AUTHOR${NC}"
}

# Function to handle errors
handle_error() {
    local exit_code=$1
    local message=$2
    if [ $exit_code -ne 0 ]; then
        echo -e "${RED}Error: $message${NC}"
        exit $exit_code
    fi
}

# Function to convert video
convert_video() {
    local input_file=$1
    local output_file=$2
    echo -e "${BLUE}Converting $input_file to $output_file...${NC}"
    
    mkdir -p "$(dirname "$output_file")"
    ffmpeg -i "$input_file" \
        -c:v libx264 \
        -preset slow \
        -profile:v baseline \
        -level 3.0 \
        -vf "scale=1280:720" \
        -b:v 1500k \
        -maxrate 1500k \
        -bufsize 3000k \
        -c:a aac \
        -b:a 128k \
        -movflags +faststart \
        "$output_file"
    
    handle_error $? "Failed to convert $input_file"
    echo -e "${GREEN}Successfully converted $input_file to $output_file${NC}"
}

# Parse arguments
INPUT_FILES=()
OUTPUT_FILES=()
OUTPUT_FOLDER="."

while [[ $# -gt 0 ]]; do
    case $1 in
        -i|--input)
            shift
            while [[ $# -gt 0 && ! $1 =~ ^- ]]; do
                INPUT_FILES+=("$1")
                shift
            done
            ;;
        -o|--output)
            shift
            while [[ $# -gt 0 && ! $1 =~ ^- ]]; do
                OUTPUT_FILES+=("$1")
                shift
            done
            ;;
        -v|--version)
            version
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            usage
            exit 1
            ;;
    esac
done

# If no input files are specified, show usage and exit
if [ ${#INPUT_FILES[@]} -eq 0 ]; then
    usage
    exit 1
fi

# Handle output files/folder
if [ ${#OUTPUT_FILES[@]} -eq 0 ]; then
    # No output specified, use default naming
    OUTPUT_FOLDER="."
elif [ ${#OUTPUT_FILES[@]} -eq 1 ]; then
    # Single output specified, check if it's a folder
    if [[ -d "${OUTPUT_FILES[0]}" ]]; then
        OUTPUT_FOLDER="${OUTPUT_FILES[0]}"
    else
        # Single output file specified, but multiple inputs (use as folder)
        if [ ${#INPUT_FILES[@]} -gt 1 ]; then
            OUTPUT_FOLDER="${OUTPUT_FILES[0]}"
            mkdir -p "$OUTPUT_FOLDER"
        else
            OUTPUT_FILES=("${OUTPUT_FILES[0]}")
        fi
    fi
fi

# Convert videos
for i in "${!INPUT_FILES[@]}"; do
    INPUT_FILE="${INPUT_FILES[$i]}"
    if [ ${#OUTPUT_FILES[@]} -gt 1 ]; then
        OUTPUT_FILE="${OUTPUT_FILES[$i]}"
    else
        OUTPUT_FILE="$OUTPUT_FOLDER/converted-$(basename "$INPUT_FILE" .${INPUT_FILE##*.}).mp4"
    fi
    convert_video "$INPUT_FILE" "$OUTPUT_FILE"
done

exit 0
